#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const colors = {
  blue: '\x1b[34m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  red: '\x1b[31m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

const EXCLUDE_DIRS = ['node_modules', '.git', 'dist', 'build', '.next', '.cache', 'claude-files'];
const EXCLUDE_FILES = ['.DS_Store', 'Thumbs.db', '.env'];
const EXCLUDE_EXTENSIONS = ['.pdf', '.sqlite', '.db', '.log'];

const INCLUDE_EXTENSIONS = ['.js', '.json', '.html', '.md', '.css'];
const INCLUDE_SPECIFIC_FILES = ['.env.example', '.gitignore', 'package-lock.json'];

let filesCopied = 0;
let totalSize = 0;
let errors = [];

function formatFileSize(bytes) {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function shouldExclude(filePath) {
  const parts = filePath.split(path.sep);
  const fileName = path.basename(filePath);
  const ext = path.extname(filePath).toLowerCase();
  
  // Check if any part of the path contains excluded directories
  if (parts.some(part => EXCLUDE_DIRS.includes(part))) return true;
  
  // Check if file is in exclude list
  if (EXCLUDE_FILES.includes(fileName)) return true;
  
  // Check if extension is excluded
  if (EXCLUDE_EXTENSIONS.includes(ext)) return true;
  
  return false;
}

function shouldInclude(filePath) {
  const fileName = path.basename(filePath);
  const ext = path.extname(filePath).toLowerCase();
  
  // Check specific files first
  if (INCLUDE_SPECIFIC_FILES.includes(fileName)) return true;
  
  // Check extensions
  if (INCLUDE_EXTENSIONS.includes(ext)) return true;
  
  // Special case for CSS files in brands folders
  if (ext === '.css' && filePath.includes('brands')) return true;
  
  return false;
}

function ensureDirectoryExists(dir) {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
}

function copyFile(sourcePath, destPath) {
  try {
    ensureDirectoryExists(path.dirname(destPath));
    fs.copyFileSync(sourcePath, destPath);
    const stats = fs.statSync(sourcePath);
    totalSize += stats.size;
    filesCopied++;
    
    const size = formatFileSize(stats.size).padStart(10);
    console.log(`${colors.green}✓${colors.reset} ${size} ${path.relative(process.cwd(), sourcePath)}`);
  } catch (error) {
    errors.push({ file: sourcePath, error: error.message });
    console.log(`${colors.red}✗${colors.reset} Error copying ${path.relative(process.cwd(), sourcePath)}: ${error.message}`);
  }
}

function scanAndCopy(sourceDir, destDir, baseSourceDir = sourceDir) {
  if (!fs.existsSync(sourceDir)) return;
  
  const items = fs.readdirSync(sourceDir);
  
  items.forEach(item => {
    const sourcePath = path.join(sourceDir, item);
    const relativePath = path.relative(baseSourceDir, sourcePath);
    const destPath = path.join(destDir, relativePath);
    
    if (shouldExclude(relativePath)) return;
    
    try {
      const stat = fs.statSync(sourcePath);
      
      if (stat.isDirectory()) {
        scanAndCopy(sourcePath, destDir, baseSourceDir);
      } else if (stat.isFile() && shouldInclude(sourcePath)) {
        copyFile(sourcePath, destPath);
      }
    } catch (error) {
      errors.push({ file: sourcePath, error: error.message });
    }
  });
}

function createReadme(destDir) {
  const readmePath = path.join(destDir, 'CLAUDE_IMPORT_README.md');
  const content = `# Claude Project Files Import

This folder contains all the important files from the Teneo Marketplace project,
organized and ready to be imported into Claude's project files.

## Contents
- **JavaScript Files**: All .js files from the project
- **Configuration**: All .json configuration files
- **HTML Templates**: All .html files
- **Documentation**: All .md files
- **Styles**: CSS files from brands folders
- **Environment**: .env.example file

## How to Import
1. Select this entire 'claude-files' folder
2. Drag and drop it into Claude's interface
3. Claude will automatically process all the files

## Files Copied
- Total Files: ${filesCopied}
- Total Size: ${formatFileSize(totalSize)}
- Timestamp: ${new Date().toISOString()}

## Excluded
- node_modules/
- .git/
- PDF files
- SQLite databases
- Build/dist folders
- Actual .env files (only .env.example included)

Generated by copy-for-claude.js
`;
  
  fs.writeFileSync(readmePath, content);
}

function main() {
  console.log(`${colors.bold}${colors.magenta}\n📋 Copying Teneo Marketplace Files for Claude${colors.reset}\n`);
  
  const projectRoot = path.resolve(__dirname, '..');
  const destDir = path.join(projectRoot, 'claude-files');
  
  // Clean up existing claude-files directory
  if (fs.existsSync(destDir)) {
    console.log(`${colors.yellow}⚠️  Removing existing claude-files directory...${colors.reset}`);
    fs.rmSync(destDir, { recursive: true, force: true });
  }
  
  // Create new directory
  console.log(`${colors.cyan}📁 Creating claude-files directory...${colors.reset}\n`);
  ensureDirectoryExists(destDir);
  
  // Start copying
  console.log(`${colors.cyan}📑 Copying files...${colors.reset}`);
  console.log('─'.repeat(80));
  
  const startTime = Date.now();
  scanAndCopy(projectRoot, destDir);
  
  // Create readme
  createReadme(destDir);
  filesCopied++; // Count the readme
  
  const duration = ((Date.now() - startTime) / 1000).toFixed(2);
  
  // Print summary
  console.log('─'.repeat(80));
  console.log(`\n${colors.bold}${colors.green}✨ Copy Complete!${colors.reset}\n`);
  
  console.log(`${colors.cyan}📊 Summary:${colors.reset}`);
  console.log(`   Files copied: ${colors.green}${filesCopied}${colors.reset}`);
  console.log(`   Total size: ${colors.green}${formatFileSize(totalSize)}${colors.reset}`);
  console.log(`   Time taken: ${colors.green}${duration}s${colors.reset}`);
  console.log(`   Location: ${colors.bold}${destDir}${colors.reset}`);
  
  if (errors.length > 0) {
    console.log(`\n${colors.yellow}⚠️  Errors (${errors.length}):${colors.reset}`);
    errors.slice(0, 5).forEach(({ file, error }) => {
      console.log(`   ${colors.red}✗${colors.reset} ${path.relative(projectRoot, file)}: ${error}`);
    });
    if (errors.length > 5) {
      console.log(`   ${colors.yellow}... and ${errors.length - 5} more${colors.reset}`);
    }
  }
  
  console.log(`\n${colors.bold}${colors.cyan}📤 To import into Claude:${colors.reset}`);
  console.log('   1. Open the claude-files folder in your file explorer');
  console.log('   2. Select all files (Ctrl+A or Cmd+A)');
  console.log('   3. Drag and drop them into Claude\'s interface');
  console.log('   4. Or use the "Add files" button in Claude\n');
  
  // Platform-specific instructions
  if (process.platform === 'win32') {
    console.log(`${colors.yellow}💡 Tip:${colors.reset} Run ${colors.bold}tools\\copy-for-claude.bat${colors.reset} to automatically open the folder\n`);
  } else if (process.platform === 'darwin') {
    console.log(`${colors.yellow}💡 Tip:${colors.reset} Run ${colors.bold}open claude-files${colors.reset} to open the folder\n`);
  } else {
    console.log(`${colors.yellow}💡 Tip:${colors.reset} Run ${colors.bold}xdg-open claude-files${colors.reset} to open the folder\n`);
  }
}

// Run the script
main();